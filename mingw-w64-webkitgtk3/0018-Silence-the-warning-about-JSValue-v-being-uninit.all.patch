From e7ce4cf2de87ec0cbe2d60738cd5ca9515d56c3a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=A0=D1=83=D1=81=D0=BB=D0=B0=D0=BD=20=D0=98=D0=B6=D0=B1?=
 =?UTF-8?q?=D1=83=D0=BB=D0=B0=D1=82=D0=BE=D0=B2?= <lrn1986@gmail.com>
Date: Tue, 14 Apr 2015 14:48:32 +0000
Subject: [PATCH 18/20] Silence the warning about JSValue 'v' being
 uninitialized

This shouldn't really happen, as the enumeration only has two values,
but gcc doesn't seem to understand it. Probably because it's a template.
Also, 'v' is an object, so there's an uninitialized object that participates
in a '=' operator, so that could be the cause for concern as well.

Fix this by completely separating two cases at the cost of code duplication.

Otherwise one would get this:
../webkitgtk-2.4.8/Source/JavaScriptCore/runtime/JSObject.cpp: In member function 'JSC::ContiguousJSValues JSC::JSObject::genericConvertDoubleToContiguous(JSC::VM&) [with JSC::JSObject::DoubleToContiguousMode mode = (JSC::JSObject::DoubleToContiguousMode)0u; JSC::ContiguousJSValues = JSC::ContiguousData<JSC::WriteBarrier<JSC::Unknown> >]':
../webkitgtk-2.4.8/Source/JavaScriptCore/runtime/JSObject.cpp:822:17: warning: 'v' is used uninitialized in this function [-Wuninitialized]
---
 Source/JavaScriptCore/runtime/JSObject.cpp | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/Source/JavaScriptCore/runtime/JSObject.cpp b/Source/JavaScriptCore/runtime/JSObject.cpp
index 6910b7e..5f52fe0 100644
--- a/Source/JavaScriptCore/runtime/JSObject.cpp
+++ b/Source/JavaScriptCore/runtime/JSObject.cpp
@@ -821,15 +821,19 @@ ContiguousJSValues JSObject::genericConvertDoubleToContiguous(VM& vm)
         }
         JSValue v;
         switch (mode) {
-        case EncodeValueAsDouble:
-            v = JSValue(JSValue::EncodeAsDouble, value);
-            break;
-        case RageConvertDoubleToValue:
-            v = jsNumber(value);
-            break;
+            case EncodeValueAsDouble: { 
+                JSValue v = JSValue(JSValue::EncodeAsDouble, value);
+                ASSERT(v.isNumber());
+                currentAsValue->setWithoutWriteBarrier(v);
+                break;
+            }
+            case RageConvertDoubleToValue: {
+                JSValue v = jsNumber(value);
+                ASSERT(v.isNumber());
+                currentAsValue->setWithoutWriteBarrier(v);
+                break;
+            }
         }
-        ASSERT(v.isNumber());
-        currentAsValue->setWithoutWriteBarrier(v);
     }
     
     setStructure(vm, Structure::nonPropertyTransition(vm, structure(), AllocateContiguous));
-- 
1.8.5.3

