# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

_realname=git
pkgbase="mingw-w64-${_realname}"
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
	 "${MINGW_PACKAGE_PREFIX}-${_realname}-doc-html"
	 "${MINGW_PACKAGE_PREFIX}-${_realname}-doc-man")
tag=2.6.3.windows.1
pkgver=2.6.3.1.c6f19b0
pkgrel=1
pkgdesc="The fast distributed version control system (mingw-w64)"
arch=('any')
url="https://git-for-windows.github.io/"
license=('GPL2')

makedepends=('python2' 'less' 'openssh' 'patch' 'make' 'tar' 'diffutils'
	'ca-certificates' 'asciidoc' 'xmlto'
	"${MINGW_PACKAGE_PREFIX}-asciidoctor-extensions")

depends=("${MINGW_PACKAGE_PREFIX}-curl"
         "${MINGW_PACKAGE_PREFIX}-ca-certificates"
         "${MINGW_PACKAGE_PREFIX}-expat>=2.0"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         "${MINGW_PACKAGE_PREFIX}-pcre"
         "${MINGW_PACKAGE_PREFIX}-tcl"
         "${MINGW_PACKAGE_PREFIX}-tk"
         "perl-Error"
         "perl>=5.14.0"
         "perl-Authen-SASL"
         "perl-libwww"
         "perl-MIME-tools"
         "perl-Net-SMTP-SSL"
         "perl-TermReadKey")

source=("${_realname}"::"git+https://github.com/git-for-windows/git.git#tag=v$tag"
	'git-for-windows.ico'
	'start-ssh-agent.cmd'
	'git-bash.rc'
	'git-cmd.rc'
	'git-wrapper.rc'
	'gitk.rc'
	'compat-bash.rc')

md5sums=('SKIP'
         '18763e83447859af27f30b316d7e9f64'
         'c9ce5141664cc7f221c06fcb8b4becb5'
         '24892485098f4b47d6d73e09f5a0ad39'
         '0f3fb5d6fb2a591140f11de52745d4a2'
         'b2d7878989a5483705c0da5b92b39e80'
         'b2d7878989a5483705c0da5b92b39e80'
         '2614f4b523490d82fa7c01bd82e47b2f')

pkgver() {
  cd "$srcdir/git"
  basever=${tag%.windows.*}
  test "$tag" = "$basever" ||
  basever="$basever.${tag##*.windows.}"
  printf "%s.%s" "${basever}" "$(git rev-parse --short HEAD)"
}

case "$CARCH" in
i686)
  ASCIIDOCTORDIR=/mingw32/lib/asciidoctor-extensions
  SHAREDIR=/mingw32/share/git
  ;;
x86_64)
  ASCIIDOCTORDIR=/mingw64/lib/asciidoctor-extensions
  SHAREDIR=/mingw64/share/git
  ;;
esac

prepare () {
	cd "$srcdir/git" &&

	cat >config.mak <<-EOF
	ASCIIDOC=asciidoctor
	ASCIIDOC_HTML=html5
	ASCIIDOC_DOCBOOK=docbook45
	ASCIIDOC_EXTRA="-alitdd=&\#45;&\#45;"
	ASCIIDOC_CONF=-I"$ASCIIDOCTORDIR" -rman-inline-macro
	EOF
}

build() {
  test -z "$PARALLEL_BUILD" || {
    echo "WARNING: PARALLEL_BUILD is deprecated. Use MAKEFLAGS=-j15 instead" >&2
    export MAKEFLAGS="$PARALLEL_BUILD $MAKEFLAGS"
  }
  export PYTHON_PATH=/usr/bin/python2
  cd "$srcdir/git"

  if test false != "$(git config core.autocrlf)"
  then
    git config core.autocrlf false
    rm .git/index
    git stash
  fi

  # Git wants to decide itself whether to use ANSI stdio emulation or not
  CPPFLAGS="$(echo "$CPPFLAGS" |
	sed 's/-D__USE_MINGW_ANSI_STDIO\(=[0-9]*\)\?//')"

  targets=
  case "${PKGLIST[@]}" in ''|*-git|*-git\ *) targets="$targets all";; esac
  case "${PKGLIST[@]}" in ''|*html*) targets="$targets html";; esac
  case "${PKGLIST[@]}" in ''|*man*) targets="$targets man";; esac

  counter=0
  while ! make $targets
  do
    counter=$(($counter+1))
    test $counter -lt 5 || {
      echo "Could not build (tried 5 times)" >&2
      exit 1
    }
  done &&

  (for basename in git-bash git-cmd git-wrapper gitk compat-bash
   do
	windres -O coff ../$basename.rc -o $basename.res || break
   done
  ) &&
  gcc -mwindows -s -O2 -Wall -o git-bash.exe git-bash.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mconsole -s -O2 -Wall -o git-cmd.exe git-cmd.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mconsole -s -O2 -Wall -o compat-bash.exe compat-bash.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  mkdir -p cmd &&
  gcc -mconsole -s -O2 -Wall -o cmd/git.exe git-wrapper.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mwindows -s -O2 -Wall -o cmd/gitk.exe gitk.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mwindows -s -O2 -Wall -o cmd/git-gui.exe gitk.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  cat >print.mak <<\EOF &&
include Makefile

print-builtins:
	@echo $(BUILT_INS)
EOF
  make -f print.mak print-builtins | tr ' ' '\n' > builtins.txt &&

  CC=gcc make -C contrib/credential/wincred
}

package_git () {
  export PYTHON_PATH=/usr/bin/python2
  cd "$srcdir"/git

  make DESTDIR="$pkgdir" install

  # completions
  PREFIX="$(expr "$(cat < GIT-PREFIX)" : '[^:]*:[^:]*:[^:]*:\([^:]*\):[^:]*')"
  install -d "$pkgdir/$PREFIX/share/git/completion/"
  install contrib/completion/* "$pkgdir/$PREFIX/share/git/completion/"

  # subtree, for backwards-compatibility with MSys2's Git package
  make -C contrib/subtree prefix="$pkgdir/$PREFIX" install

  # git-credential-wincred.exe
  make -C contrib/credential/wincred prefix="$pkgdir/$PREFIX" install

  # Git Bash, Git CMD
  install -d -m755 $pkgdir$SHAREDIR
  install -m755 ../git-for-windows.ico $pkgdir$SHAREDIR
  install -m755 git-bash.exe git-cmd.exe $pkgdir

  # Compatibility Bash
  install -m755 compat-bash.exe $pkgdir$SHAREDIR

  # Install Git wrapper into /cmd/
  install -d -m755 $pkgdir/cmd
  install -m755 cmd/git.exe cmd/gitk.exe cmd/git-gui.exe \
	../start-ssh-agent.cmd $pkgdir/cmd

  # Install builtins.txt
  install -m644 builtins.txt $pkgdir$SHAREDIR
}

package_git-doc-html () {
  cd "$srcdir"/git

  make DESTDIR="$pkgdir" install-html

  # subtree, for backwards-compatibility with MSys2's Git package
  make -C contrib/subtree prefix="$pkgdir/$PREFIX" install-html
}

package_git-doc-man () {
  cd "$srcdir"/git

  make DESTDIR="$pkgdir" install-man

  # subtree, for backwards-compatibility with MSys2's Git package
  make -C contrib/subtree prefix="$pkgdir/$PREFIX" install-man
}

package_mingw-w64-i686-git () {
  package_git
}

package_mingw-w64-i686-git-doc-html () {
  package_git-doc-html
}

package_mingw-w64-i686-git-doc-man () {
  package_git-doc-man
}

package_mingw-w64-x86_64-git () {
  package_git
}

package_mingw-w64-x86_64-git-doc-html () {
  package_git-doc-html
}

package_mingw-w64-x86_64-git-doc-man () {
  package_git-doc-man
}
