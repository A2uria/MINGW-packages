# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_realname=angleproject
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}-git"
pkgver=2.1.r3427
pkgrel=1
pkgdesc='Angle project built from git source (mingw-w64)'
arch=('any')
url='http://code.google.com/p/angleproject/'
license=('LGPLv2+')
groups=('mingw-w64')
depends=()
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc" 'gyp-svn' 'git')
provides=("${MINGW_PACKAGE_PREFIX}-angleproject")
conflicts=("${MINGW_PACKAGE_PREFIX}-angleproject")
options=('!strip' 'staticlibs')
source=("angleproject"::git+https://chromium.googlesource.com/angle/angle#commit=30d6c255d238c3064980a22f66fecf0ef9bb58d0
        0000-General-fixes-for-ANGLE-2.1.patch
        0004-Make-it-possible-to-link-ANGLE-statically-for-single.patch
        0008-ANGLE-Dynamically-load-D3D-compiler-from-a-list-or-t.patch
        0009-ANGLE-Support-WinRT.patch
        0010-ANGLE-Enable-D3D11-for-feature-level-9-cards.patch
        0012-ANGLE-fix-semantic-index-lookup.patch
        0013-ANGLE-Add-support-for-querying-platform-device.patch
        0014-Let-ANGLE-use-multithreaded-devices-if-necessary.patch
        0015-ANGLE-Fix-angle-d3d11-on-MSVC2010.patch
        0017-ANGLE-Fix-compilation-with-D3D9.patch
        0018-ANGLE-Fix-releasing-textures-after-we-kill-D3D11.patch
        angleproject-disable-debug-annotations.patch
        angleproject-export-shader-symbols.patch
        angleproject-include-import-library-and-use-def-file.patch
        angleproject-prevent-multiple-definition-errors.patch
        angleproject-undo-shader-renames.patch
        0050-Untangle-OS-from-GENERATOR-a-bit-for-MSYS2.patch
        commit-4de44cb
        commit-409078f
        libEGL_mingw32.def
        libGLESv2_mingw32.def)
md5sums=('SKIP'
         'b14a834c2d51c7af99f8aaf089851d23'
         'fa43f37117af18de3badfc4481ee3639'
         'fe69049b10928166ef62e1786a13e61b'
         'e573a80dec8b594bf6244ea4a28ce438'
         'b64f5fc4838d7157753f8255613ca511'
         'baf253bebf28653468e18b92d84f4431'
         '25b88bcf7132e62c6717c145177ea157'
         '8fdd8266b8b2c276dbf4e66d2947e5e3'
         'db79439f3b889c02138ff847c7e7357f'
         '780bc9ce3c0008910707b2df20c3430c'
         '2787c0a067665b02c161c7392b7175e4'
         'f2289e55621764d05e16a71ba09dd779'
         '19a72088f614a5f22004b2687a73f3ad'
         '8374ba08ca0cc5620ac2c94209122134'
         '8f54b19db99483c9ee37054d302bf806'
         'f44242b0abb63290bd571a953bae34b9'
         'ac2b570ba5505b7531495e61de68ea5d'
         'cce58c740f92bf1b2f7ca4a58999a5fc'
         'a94c3e8bfe9e62198b8b51311f28c9a5'
         '7d563b2218692a5ea232c1a7aa77e2a1'
         'ebee3837c9f9ad9e9b49061a2274b963')
pkgver() {
  cd "$srcdir/angleproject"
  local _major=$(head -n 4 src/common/version.h | grep 'ANGLE_MAJOR_VERSION' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  local _minor=$(head -n 4 src/common/version.h | grep 'ANGLE_MINOR_VERSION' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')
  printf "%s.%s.r%s" "$_major" "$_minor" "$(git rev-list --count HEAD)"
}

prepare() {
  cd "${srcdir}"/${_realname}

  cp ${srcdir}/libEGL_mingw32.def src/libEGL/
  cp ${srcdir}/libGLESv2_mingw32.def src/libGLESv2/

  ### Fedora team patches ###
  
  patch -p4 -i ${srcdir}/0000-General-fixes-for-ANGLE-2.1.patch
  patch -p4 -i ${srcdir}/0004-Make-it-possible-to-link-ANGLE-statically-for-single.patch
  patch -p4 -i ${srcdir}/0008-ANGLE-Dynamically-load-D3D-compiler-from-a-list-or-t.patch
  patch -p4 -i ${srcdir}/0009-ANGLE-Support-WinRT.patch
  patch -p4 -i ${srcdir}/0010-ANGLE-Enable-D3D11-for-feature-level-9-cards.patch
  patch -p4 -i ${srcdir}/0012-ANGLE-fix-semantic-index-lookup.patch
  patch -p4 -i ${srcdir}/0013-ANGLE-Add-support-for-querying-platform-device.patch
  patch -p4 -i ${srcdir}/0014-Let-ANGLE-use-multithreaded-devices-if-necessary.patch
  patch -p4 -i ${srcdir}/0015-ANGLE-Fix-angle-d3d11-on-MSVC2010.patch
  patch -p4 -i ${srcdir}/0017-ANGLE-Fix-compilation-with-D3D9.patch
  patch -p4 -i ${srcdir}/0018-ANGLE-Fix-releasing-textures-after-we-kill-D3D11.patch
  
  # Disable some debug code as it depends on the ID3DUserDefinedAnnotation
  # interface which isn't available in mingw-w64 yet
  # Patch for this is currently pending at http://source.winehq.org/patches/data/108405
  patch -p1 -i ${srcdir}/angleproject-disable-debug-annotations.patch
  
  # Undo a change from 0000-General-fixes-for-ANGLE-2.1.patch which renames
  # some shader references, but which doesn't rename the precompiled shaders
  patch -p1 -i ${srcdir}/angleproject-undo-shader-renames.patch
  
  # Prevent multiple definition errors during the final link of libGLESv2
  patch -p1 -i ${srcdir}/angleproject-prevent-multiple-definition-errors.patch
  
  # Revert commit 4de44cb and commit 409078f as qt5-qtwebkit still depends on it
  patch -p1 -R -i ${srcdir}/commit-4de44cb
  patch -p1 -R -i ${srcdir}/commit-409078f
  
  # Make sure an import library is created and the correct .def file is used during the build
  patch -p1 -i ${srcdir}/angleproject-include-import-library-and-use-def-file.patch
  
  # WebKit depends on symbols which are used in the static library called translator_hlsl
  # This static library is linked into the libGLESv2 shared library
  # To allow building WebKit export the required symbols in the libGLESv2 shared library
  patch -p1 -i ${srcdir}/angleproject-export-shader-symbols.patch

  ### MSYS2 team patches ###
  
  # Untangle OS and GENERATOR some.
  patch -p1 -i "${srcdir}"/0050-Untangle-OS-from-GENERATOR-a-bit-for-MSYS2.patch

  echo "" > src/copy_compiler_dll.bat
  chmod +x src/copy_compiler_dll.bat
}

build() {
  cd "${srcdir}"/angleproject

  export PYTHON=/usr/bin/python2

  #export CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  #export CXXFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"

  sed -i -e 's_python _python2 _g' -e 's_"python"_"python2"_g' -e "s_'python'_'python2'_g" -e 's_/usr/bin/python_/usr/bin/python2_g' $(find -type f)
  sed -i -e 's|vsprintf_s|vsprintf|g' $(find . \( -name '*.h' -or -name '*.cpp' \) -and -type f)

  mkdir -p build-${MINGW_CHOST} && pushd build-${MINGW_CHOST}

  if [ "${MINGW_CHOST}" = "i686-w64-mingw32" ]
  then
    _target="win32"
  else
    _target="win64"
  fi

  gyp -D OS=win --format make -D MSVS_VERSION="" -D TARGET=$_target --depth . -I ../build/common.gypi ../src/angle.gyp

  # Make sure the correct libraries are linked in
  sed -i s@'^LIBS :='@'LIBS := -ld3d9 -ldxguid'@ ../src/libGLESv2.target.mk
  sed -i s@'^LIBS :='@'LIBS := -ld3d9 -ldxguid -L. -lGLESv2'@ ../src/libEGL.target.mk

  # LINK=g++ is to prevent using flock to serialize linking.
  LINK=g++ make -j1 V=1 CXXFLAGS="-std=c++11 -msse2 -DUNICODE -D_UNICODE"

  ${MINGW_PREFIX}/bin/ar rcs libGLESv2.a \
            out/Debug/obj.target/src/common/*.o \
            out/Debug/obj.target/src/common/win32/*.o \
            out/Debug/obj.target/src/compiler/translator/*.o \
            out/Debug/obj.target/src/compiler/translator/depgraph/*.o \
            out/Debug/obj.target/src/compiler/translator/timing/*.o \
            out/Debug/obj.target/src/compiler/preprocessor/*.o \
            out/Debug/obj.target/src/third_party/compiler/*.o \
            out/Debug/obj.target/src/third_party/murmurhash/*.o \
            out/Debug/obj.target/src/third_party/systeminfo/*.o \
            out/Debug/obj.target/src/libGLESv2/*.o \
            out/Debug/obj.target/src/libGLESv2/renderer/*.o \
            out/Debug/obj.target/src/libGLESv2/renderer/d3d/*.o \
            out/Debug/obj.target/src/libGLESv2/renderer/d3d/d3d9/*.o \
            out/Debug/obj.target/src/libGLESv2/renderer/d3d/d3d11/*.o

  ${MINGW_PREFIX}/bin/ar rcs libEGL.a \
            out/Debug/obj.target/libEGL/../src/common/RefCountObject.o \
            out/Debug/obj.target/libEGL/../src/common/angleutils.o \
            out/Debug/obj.target/libEGL/../src/common/debug.o \
            out/Debug/obj.target/libEGL/../src/common/event_tracer.o \
            out/Debug/obj.target/libEGL/../src/common/mathutil.o \
            out/Debug/obj.target/libEGL/../src/common/tls.o \
            out/Debug/obj.target/libEGL/../src/common/utilities.o \
            out/Debug/obj.target/libEGL/../src/libEGL/AttributeMap.o \
            out/Debug/obj.target/libEGL/../src/libEGL/Config.o \
            out/Debug/obj.target/libEGL/../src/libEGL/Display.o \
            out/Debug/obj.target/libEGL/../src/libEGL/Error.o \
            out/Debug/obj.target/libEGL/../src/libEGL/Surface.o \
            out/Debug/obj.target/libEGL/../src/libEGL/libEGL.o \
            out/Debug/obj.target/libEGL/../src/libEGL/main.o \
            out/Debug/obj.target/libEGL/../src/common/win32/NativeWindow.o

  popd
}

package() {
  cd "${srcdir}"/angleproject
  pushd build-${MINGW_CHOST}

  mkdir -p "${pkgdir}${MINGW_PREFIX}"/{bin,lib,include}

  install out/Debug/src/libGLESv2.dll "${pkgdir}${MINGW_PREFIX}"/bin/libGLESv2.dll
  install out/Debug/src/libEGL.dll "${pkgdir}${MINGW_PREFIX}"/bin/libEGL.dll

  ${MINGW_PREFIX}/bin/strip --strip-unneeded "${pkgdir}${MINGW_PREFIX}"/bin/*.dll

  install libGLESv2.a "${pkgdir}${MINGW_PREFIX}"/lib/
  install libEGL.a "${pkgdir}${MINGW_PREFIX}"/lib/

  ${MINGW_PREFIX}/bin/strip --strip-debug "${pkgdir}${MINGW_PREFIX}"/lib/libEGL.a
  install libEGL.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/
  install libGLESv2.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/
  ${MINGW_PREFIX}/bin/strip --strip-unneeded "${pkgdir}${MINGW_PREFIX}"/lib/*.dll.a

  cp -Rv ../include/* "${pkgdir}${MINGW_PREFIX}"/include/

  popd

}
