From 0d41b3966dc4e0b41e5da7a618896b087ab19bfe Mon Sep 17 00:00:00 2001
From: Martell Malone <martellmalone@gmail.com>
Date: Tue, 10 Mar 2015 19:34:09 +0000
Subject: [PATCH] dx11 vout: add WINSTORE support


diff --git a/include/vlc_windows_interfaces.h b/include/vlc_windows_interfaces.h
index e4c41f2..85ac475 100644
--- a/include/vlc_windows_interfaces.h
+++ b/include/vlc_windows_interfaces.h
@@ -38,13 +38,13 @@
 
 /* rpcndr.h defines small not only for idl */
 #undef small
-
+#if !VLC_WINSTORE_APP
 /* mingw.org fails to define this */
 #ifndef __ITaskbarList3_INTERFACE_DEFINED__
 #define __ITaskbarList3_INTERFACE_DEFINED__
 const GUID CLSID_TaskbarList ={ 0x56FDF344,0xFD6D,0x11d0,{0x95,0x8A,0x00,0x60,0x97,0xC9,0xA0,0x90}};
 const GUID IID_ITaskbarList3 = { 0xea1afb91,0x9e28,0x4b86,{0x90,0xe9,0x9e,0x9f,0x8a,0x5e,0xef,0xaf}};
-
+#endif
 
 typedef enum TBPFLAG
 {
@@ -204,10 +204,10 @@ struct ITaskbarList3Vtbl
 
     long ( WINAPI *ThumbBarUpdateButtons )(ITaskbarList3 *This, HWND hwnd,
         UINT cButtons, LPTHUMBBUTTON pButton);
-
+#if !VLC_WINSTORE_APP
     long ( WINAPI *ThumbBarSetImageList )(ITaskbarList3 *This, HWND hwnd,
         HIMAGELIST himl);
-
+#endif
     long ( WINAPI *SetOverlayIcon )(ITaskbarList3 *This, HWND hwnd,
         HICON hIcon, LPCWSTR pszDescription);
 
diff --git a/modules/video_output/Makefile.am b/modules/video_output/Makefile.am
index 943ad6a..1505a9f 100644
--- a/modules/video_output/Makefile.am
+++ b/modules/video_output/Makefile.am
@@ -186,13 +186,13 @@ EXTRA_LTLIBRARIES += libdirect3d9_plugin.la
 endif
 
 libdirect3d11_plugin_la_SOURCES = video_output/msw/direct3d11.c \
- video_output/msw/common.c video_output/msw/common.h \
- video_output/msw/events.c video_output/msw/events.h \
- video_output/msw/builtin_shaders.h \
- video_output/msw/win32touch.c video_output/msw/win32touch.h
+ video_output/msw/common.c video_output/msw/common.h
 libdirect3d11_plugin_la_CPPFLAGS = $(AM_CPPFLAGS) \
  -DMODULE_NAME_IS_direct3d11
 if !HAVE_WINSTORE
+libdirect3d11_plugin_la_SOURCES += video_output/msw/events.c \
+ video_output/msw/events.h video_output/msw/builtin_shaders.h \
+ video_output/msw/win32touch.c video_output/msw/win32touch.h
 libdirect3d11_plugin_la_LIBADD = -lgdi32 -lole32 -luuid
 else
 libdirect3d11_plugin_la_LIBADD = -ld3dcompiler -lole32 -luuid
diff --git a/modules/video_output/msw/common.c b/modules/video_output/msw/common.c
index 8de44fd..a028515 100644
--- a/modules/video_output/msw/common.c
+++ b/modules/video_output/msw/common.c
@@ -42,26 +42,30 @@
 
 #include <vlc_windows_interfaces.h>
 
+#if !VLC_WINSTORE_APP
 static void CommonChangeThumbnailClip(vout_display_t *, bool show);
 static int  CommonControlSetFullscreen(vout_display_t *, bool is_fullscreen);
 
 static void DisableScreensaver(vout_display_t *);
 static void RestoreScreensaver(vout_display_t *);
+#endif
 
 /* */
 int CommonInit(vout_display_t *vd)
 {
     vout_display_sys_t *sys = vd->sys;
 
-    sys->hwnd      = NULL;
-    sys->hvideownd = NULL;
-    sys->hparent   = NULL;
-    sys->hfswnd    = NULL;
-    sys->changes   = 0;
+    sys->hwnd             = NULL;
+    sys->hvideownd        = NULL;
+    sys->hparent          = NULL;
+    sys->hfswnd           = NULL;
+    sys->changes          = 0;
+    sys->is_first_display = true;
+    sys->is_on_top        = false;
+
+#if !VLC_WINSTORE_APP
     SetRectEmpty(&sys->rect_display);
     SetRectEmpty(&sys->rect_parent);
-    sys->is_first_display = true;
-    sys->is_on_top = false;
 
     var_Create(vd, "video-deco", VLC_VAR_BOOL | VLC_VAR_DOINHERIT);
     var_Create(vd, "disable-screensaver", VLC_VAR_BOOL | VLC_VAR_DOINHERIT);
@@ -70,7 +74,7 @@ int CommonInit(vout_display_t *vd)
     sys->event = EventThreadCreate(vd);
     if (!sys->event)
         return VLC_EGENERIC;
-
+#endif
     event_cfg_t cfg;
     memset(&cfg, 0, sizeof(cfg));
 #ifdef MODULE_NAME_IS_direct3d9
@@ -83,7 +87,7 @@ int CommonInit(vout_display_t *vd)
     cfg.y      = var_InheritInteger(vd, "video-y");
     cfg.width  = vd->cfg->display.width;
     cfg.height = vd->cfg->display.height;
-
+#if !VLC_WINSTORE_APP
     event_hwnd_t hwnd;
     if (EventThreadStart(sys->event, &hwnd, &cfg))
         return VLC_EGENERIC;
@@ -100,7 +104,7 @@ int CommonInit(vout_display_t *vd)
     }
 
     DisableScreensaver (vd);
-
+#endif
     return VLC_SUCCESS;
 }
 
@@ -108,14 +112,14 @@ int CommonInit(vout_display_t *vd)
 void CommonClean(vout_display_t *vd)
 {
     vout_display_sys_t *sys = vd->sys;
-
+#if !VLC_WINSTORE_APP
     if (sys->event) {
         CommonChangeThumbnailClip(vd, false);
         EventThreadStop(sys->event);
         EventThreadDestroy(sys->event);
     }
-
     RestoreScreensaver(vd);
+#endif
 }
 
 /* */
@@ -133,7 +137,7 @@ void CommonManage(vout_display_t *vd)
      * messages. But since window can stay blocked into this function for a
      * long time (for example when you move your window on the screen), I
      * decided to isolate PeekMessage in another thread. */
-
+#if !VLC_WINSTORE_APP
     /* If we do not control our window, we check for geometry changes
      * ourselves because the parent might not send us its events. */
     if (sys->hparent) {
@@ -166,10 +170,10 @@ void CommonManage(vout_display_t *vd)
             UpdateRects(vd, NULL, NULL, true);
         }
     }
-
     /* HasMoved means here resize or move */
     if (EventThreadGetAndResetHasMoved(sys->event))
         UpdateRects(vd, NULL, NULL, false);
+#endif
 }
 
 /**
@@ -179,7 +183,7 @@ void CommonManage(vout_display_t *vd)
 void CommonDisplay(vout_display_t *vd)
 {
     vout_display_sys_t *sys = vd->sys;
-
+#if !VLC_WINSTORE_APP
     if (!sys->is_first_display)
         return;
 
@@ -194,6 +198,7 @@ void CommonDisplay(vout_display_t *vd)
                  SWP_NOSIZE|
                  SWP_NOZORDER);
     sys->is_first_display = false;
+#endif
 }
 
 /**
@@ -272,6 +277,7 @@ void AlignRect(RECT *r, int align_boundary, int align_size)
         r->right = ((r->right - r->left + align_size/2) & ~align_size) + r->left;
 }
 
+#if !VLC_WINSTORE_APP
 /* */
 static void CommonChangeThumbnailClip(vout_display_t *vd, bool show)
 {
@@ -709,3 +715,5 @@ static void RestoreScreensaver(vout_display_t *vd)
                              sys->i_spi_screensaveactive, NULL, 0);
     }
 }
+
+#endif
diff --git a/modules/video_output/msw/direct3d11.c b/modules/video_output/msw/direct3d11.c
index ba129f6..b4071a0 100644
--- a/modules/video_output/msw/direct3d11.c
+++ b/modules/video_output/msw/direct3d11.c
@@ -42,7 +42,7 @@
 # define D3D11CreateDevice(args...)             sys->OurD3D11CreateDevice(args)
 # define D3DCompile(args...)                    sys->OurD3DCompile(args)
 #else
-# define IDXGISwapChain_Present(args...)        IDXGISwapChain_Present1(args)
+//# define IDXGISwapChain_Present(a,b,c)          IDXGISwapChain_Present1(a,b,c)
 # define IDXGIFactory_CreateSwapChain(a,b,c,d)  IDXGIFactory2_CreateSwapChainForComposition(a,b,c,NULL,d)
 # define DXGI_SWAP_CHAIN_DESC                   DXGI_SWAP_CHAIN_DESC1
 #endif
@@ -104,9 +104,9 @@ static void Direct3D11DestroyResources(vout_display_t *);
 
 static int  Direct3D11MapTexture(picture_t *);
 
-/* All the #if 0 contain an alternative method to setup dx11
+/* All the #ifdef METHOD_2 contain an alternative method to setup dx11
    They both need to be benchmarked to see which performs better */
-#if 0
+#ifdef METHOD_2
 /* I have no idea why MS decided dxgi headers do not define this
    As they do have prototypes for d3d11 functions */
 typedef HRESULT(WINAPI *PFN_CREATE_DXGI_FACTORY)(REFIID riid, void **ppFactory);
@@ -219,7 +219,9 @@ static int Open(vlc_object_t *object)
     vd->pool    = CommonPool;
     vd->prepare = Prepare;
     vd->display = Display;
+#if !VLC_WINSTORE_APP
     vd->control = CommonControl;
+#endif
     vd->manage  = CommonManage;
 
     msg_Dbg(vd, "Direct3D11 Open Succeeded");
@@ -304,7 +306,7 @@ static int Direct3D11Create(vout_display_t *vd)
         return VLC_EGENERIC;
     }
 
-# if 0
+# ifdef METHOD_2
     HINSTANCE hdxgi_dll = LoadLibrary(TEXT("DXGI.DLL"));
     if (!hdxgi_dll) {
         msg_Warn(vd, "cannot load dxgi.dll, aborting");
@@ -347,7 +349,7 @@ static int Direct3D11Create(vout_display_t *vd)
         return VLC_EGENERIC;
     }
 
-# if 0
+# ifdef METHOD_2
 
     sys->hdxgi_dll = hdxgi_dll;
 
@@ -403,7 +405,7 @@ static void Direct3D11Destroy(vout_display_t *vd)
 
     vout_display_sys_t *sys = vd->sys;
 
-# if 0
+# ifdef METHOD_2
     if (sys->hdxgi_dll)
         FreeLibrary(sys->hdxgi_dll);
 # endif
@@ -477,7 +479,7 @@ static int Direct3D11Open(vout_display_t *vd, video_format_t *fmt)
     scd.OutputWindow = sys->hvideownd;
 # endif
 
-# if 0
+# ifdef METHOD_2
 
     /* TODO : list adapters for the user to choose from */
     hr = IDXGIFactory_EnumAdapters(sys->dxgifactory, 0, &sys->dxgiadapter);
@@ -584,18 +586,19 @@ static int Direct3D11Open(vout_display_t *vd, video_format_t *fmt)
 
 #  endif
 # endif
-#endif
 
-    UpdateRects(vd, NULL, NULL, true);
 
+    UpdateRects(vd, NULL, NULL, true);
+#endif
     if (Direct3D11CreateResources(vd, fmt)) {
         msg_Err(vd, "Failed to allocate resources");
         Direct3D11DestroyResources(vd);
         return VLC_EGENERIC;
     }
 
+#if !VLC_WINSTORE_APP
     EventThreadUpdateTitle(sys->event, VOUT_TITLE " (Direct3D11 output)");
-
+#endif
     msg_Dbg(vd, "Direct3D11 device adapter successfully initialized");
     return VLC_SUCCESS;
 }
-- 
2.3.1

