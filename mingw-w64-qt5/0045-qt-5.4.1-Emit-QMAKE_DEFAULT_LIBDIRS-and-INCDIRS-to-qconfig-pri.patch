--- x86_64/qtbase/tools/configure/environment.h.orig	2015-02-17 04:56:37.000000000 +0000
+++ x86_64/qtbase/tools/configure/environment.h	2015-04-27 20:38:52.767995400 +0100
@@ -57,6 +57,10 @@
     static QString detectQMakeSpec();
     static Compiler compilerFromQMakeSpec(const QString &qmakeSpec);
 
+    static int compileSomething(const QString &flags, const QString &code, QString &stdOut, QString &stdErr);
+    static QString detectCompilerDefaultIncDirs();
+    static QString detectCompilerDefaultLibDirs();
+
     static int execute(QStringList arguments, const QStringList &additionalEnv, const QStringList &removeEnv);
     static QString execute(const QString &command, int *returnCode = 0);
     static bool cpdir(const QString &srcDir, const QString &destDir);
--- x86_64/qtbase/tools/configure/environment.cpp.orig	2015-02-17 04:56:37.000000000 +0000
+++ x86_64/qtbase/tools/configure/environment.cpp	2015-04-28 00:16:41.914633600 +0100
@@ -40,6 +40,8 @@
 #include <qfile.h>
 #include <qfileinfo.h>
 #include <qstandardpaths.h>
+#include <qtemporaryfile.h>
+#include <qregularexpression.h>
 
 #include <process.h>
 #include <errno.h>
@@ -236,6 +238,112 @@
 #endif
 };
 
+/* Returns the exit-code. */
+int Environment::compileSomething(const QString &flags, const QString &code, QString &stdOut, QString &stdErr)
+{
+    CompilerInfo *info = compilerInfo(detectCompiler());
+    int returnCode = 1;
+    if (info) {
+        QTemporaryFile tmpIn("conftestXXXXXX.cpp");
+        QString tmpOutFileName;
+        {
+            QTemporaryFile tmpOut("conftestXXXXXX.o");
+            tmpOut.open();
+            tmpOut.close();
+            tmpOutFileName = tmpOut.fileName();
+        }
+        QString tmpStdErrFileName;
+        {
+            QTemporaryFile tmpStdErr("conftestXXXXXX.stderr");
+            tmpStdErr.open();
+            tmpStdErr.close();
+            tmpStdErrFileName = tmpStdErr.fileName();
+        }
+        if (tmpIn.open()) {
+            tmpIn.write(code.toUtf8());
+            tmpIn.close();
+            QString cmd = info->executable + QString(" ") + flags
+                          + QString(" -o ") + tmpOutFileName
+                          + QString(" ") + tmpIn.fileName() + " 2>" + tmpStdErrFileName;
+            stdOut = Environment::execute(cmd, &returnCode);
+            QFile tmpStdErr(tmpStdErrFileName);
+            if (tmpStdErr.open(QIODevice::ReadOnly | QIODevice::Text)) {
+                stdErr = tmpStdErr.readAll();
+                tmpStdErr.close();
+                tmpStdErr.remove();
+            }
+            QFile::remove(tmpOutFileName);
+        }
+    }
+    return returnCode;
+}
+
+QString Environment::detectCompilerDefaultIncDirs()
+{
+    QString stdOut;
+    QString stdErr;
+    int returnCode = Environment::compileSomething("-v ", "", stdOut, stdErr);
+    QStringList result;
+    int index = stdErr.indexOf("<...>");
+    if (index != -1) {
+        index = stdErr.indexOf("\n", index);
+        int lastIndex = index;
+        while (lastIndex != -1) {
+            if (stdErr[lastIndex + 1] != ' ')
+                break;
+            lastIndex += 2;
+            index = stdErr.indexOf("\n", lastIndex + 1);
+            if (index != -1) {
+                const QString newPath(QDir::cleanPath(stdErr.mid(lastIndex, index - lastIndex)));
+                if (result.indexOf(newPath) == -1)
+                    result.append(newPath);
+            }
+            lastIndex = index;
+        }
+    }
+    Q_UNUSED(returnCode);
+    QString resultString;
+    for (int i = 0; i < result.count(); ++i) {
+        resultString.append(result[i]);
+        if ( i != result.count() - 1)
+            resultString.append(" ");
+    }
+    return resultString;
+}
+
+QString Environment::detectCompilerDefaultLibDirs()
+{
+    QString stdOut;
+    QString stdErr;
+    int returnCode = Environment::compileSomething("-v ", "", stdOut, stdErr);
+    QStringList result;
+    int index = stdErr.indexOf("LIBRARY_PATH");
+    if (index != -1) {
+        index += strlen("LIBRARY_PATH");
+        int lastIndex = index;
+        while (lastIndex != -1) {
+            if (stdErr[lastIndex + 1] == '\n')
+                break;
+            index = stdErr.indexOf(";", lastIndex + 1);
+            if (index != -1) {
+                const QString newPath(QDir::cleanPath(stdErr.mid(lastIndex + 1, index - lastIndex - 1)));
+                if (result.indexOf(newPath) == -1)
+                    result.append(newPath);
+            }
+            lastIndex = index;
+        }
+    }
+    Q_UNUSED(returnCode);
+    QString resultString;
+    for (int i = 0; i < result.count(); ++i) {
+        resultString.append(result[i]);
+        if ( i != result.count() - 1)
+            resultString.append(" ");
+    }
+    return resultString;
+}
+
+
 /*!
     Creates a commandling from \a program and it \a arguments,
     escaping characters that needs it.
--- x86_64/qtbase/tools/configure/configureapp.cpp.orig	2015-04-27 17:41:27.741748800 +0100
+++ x86_64/qtbase/tools/configure/configureapp.cpp	2015-04-27 19:08:16.403164800 +0100
@@ -3388,6 +3388,9 @@
             // FIXME: add detection
             configStream << "    QMAKE_DEFAULT_LIBDIRS = /lib /usr/lib" << endl;
             configStream << "    QMAKE_DEFAULT_INCDIRS = /usr/include /usr/local/include" << endl;
+        } else {
+            configStream << "    QMAKE_DEFAULT_LIBDIRS = " << Environment::detectCompilerDefaultLibDirs() << endl;
+            configStream << "    QMAKE_DEFAULT_INCDIRS = " << Environment::detectCompilerDefaultIncDirs() << endl;
         }
         configStream << "}" << endl;
         configStream << "QT_CONFIG += " << qtConfig.join(' ') << endl;
