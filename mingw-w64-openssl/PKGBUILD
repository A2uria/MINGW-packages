# Maintainer: Alexey Pavlov <Alexpux@gmail.com>

_realname=openssl
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
_ver=1.0.2a
# use a pacman compatible version scheme
pkgver=${_ver/[a-z]/.${_ver//[0-9.]/}}
pkgrel=1
arch=('any')
pkgdesc="The Open Source toolkit for Secure Sockets Layer and Transport Layer Security (mingw-w64)"
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs" "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc")
options=('strip' '!buildflags' 'staticlibs')
license=('BSD')
url="http://www.openssl.org"
noextract=(${_realname}-${_ver}.tar.gz)
source=(http://www.openssl.org/source/${_realname}-${_ver}.tar.gz{,.asc}
        'openssl-1.0.0a-ldflags.patch'
        'openssl-1.0.0d-windres.patch'
        'openssl-1.0.2a-parallel-build.patch'
        'openssl-1.0.1-x32.patch'
        'openssl-0.9.6-x509.patch'
        'openssl-1.0.2-s_client-verify.patch'
        'openssl-1.0.1i-relocation.patch')
md5sums=('a06c547dac9044161a477211049f60ef'
         'SKIP'
         '9e0abad8dd17079815d9e92345c5adcb'
         '835a78dbe9c8690dbdd9190aaf5432e7'
         '1d363d5e19c6eb4144b49f9daadefd5f'
         '87610b76871d53d4b6f07374000dae87'
         'cae4eea6db48a254653fd1903cfabd15'
         'c7856c88da72348a76a666d42cba0f46'
         'd8ed0865f35216a5e420e37d7a4e2515')
validpgpkeys=('8657ABB260F056B1E5190839D9C4D26D0E604491')

prepare() {
  cd $startdir/
  # Clean up old sources so re-patching doesn't fail.
  [[ -d $srcdir/${_realname}-${_ver} ]] && rm -rf $srcdir/${_realname}-${_ver}
  tar -xzvf ${_realname}-${_ver}.tar.gz -C $srcdir
  cd $srcdir/${_realname}-${_ver}

  patch -p1 -i ${srcdir}/openssl-1.0.0a-ldflags.patch
  patch -p1 -i ${srcdir}/openssl-1.0.0d-windres.patch
  patch -p1 -i ${srcdir}/openssl-1.0.2a-parallel-build.patch
  patch -p1 -i ${srcdir}/openssl-1.0.2-s_client-verify.patch
  patch -p1 -i ${srcdir}/openssl-1.0.1-x32.patch
  patch -p1 -i ${srcdir}/openssl-0.9.6-x509.patch
  patch -p1 -i ${srcdir}/openssl-1.0.1i-relocation.patch

  # No support for out-of-source builds
  mkdir -p $srcdir/build-${CARCH}
  cp -a ${srcdir}/${_realname}-${_ver}/* ${srcdir}/build-${CARCH}

  # Use mingw cflags instead of hardcoded ones
  sed -i -e '/^"mingw"/ s/-fomit-frame-pointer -O3 -march=i486 -Wall/-O2 -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4/' ${srcdir}/build-${CARCH}/Configure

}

build()
{
  cd "${srcdir}/build-${CARCH}"

  _mingw=mingw
  if $(echo ${CARCH} | grep -q x86_64); then
    _mingw=mingw64
  fi
  cd "$srcdir/build-${CARCH}"
  export MSYS2_ARG_CONV_EXCL="--prefix="
  ./Configure \
    --prefix=${MINGW_PREFIX} \
    ${_mingw} \
    shared \
    zlib-dynamic \
    enable-camellia \
    enable-idea \
    enable-mdc2 \
    enable-tlsext \
    enable-rfc3779

  make ZLIB_INCLUDE=-"I${MINGW_PREFIX}/include" depend all -j1
}

package() {
  cd "$srcdir/build-${CARCH}"
  make -j1 INSTALL_PREFIX="$pkgdir" MANDIR=${MINGW_PREFIX}/share/man MANSUFFIX=ssl install

  install -D -m644 LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE

  chmod -R 755 "${pkgdir}${MINGW_PREFIX}"/bin
  chmod -R 644 "${pkgdir}${MINGW_PREFIX}"/lib
  chmod -R 755 "${pkgdir}${MINGW_PREFIX}"/lib/engines

  install -m644 ms/applink.c "${pkgdir}${MINGW_PREFIX}"/include/openssl/
  rm -rf "${pkgdir}${MINGW_PREFIX}"/bin/c_rehash
  rm -rf "${pkgdir}${MINGW_PREFIX}"/{ssl/misc,ssl/man}
}
